"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∞–≥–ª–æ–º–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞
"""

import pandas as pd
import numpy as np
from agglomerative_boosting import AgglomerativeBoosting
import matplotlib.pyplot as plt

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±—É—Å—Ç–∏–Ω–≥–∞"""
    
    # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤
    np.random.seed(42)
    n_samples = 200
    
    # –°–æ–∑–¥–∞–µ–º 3 —Ç–∏–ø–∞ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    data = []
    
    # –¢–∏–ø 1: –í—ã—Å–æ–∫–æ–ø–æ—Ä–∏—Å—Ç—ã–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã
    for i in range(n_samples // 3):
        data.append({
            'group_number': i + 1,
            'well': f'Well_{i % 5 + 1}',
            'GR': np.random.normal(60, 10),  # –ù–∏–∑–∫–∞—è —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            'RHOB': np.random.normal(2.2, 0.1),  # –ù–∏–∑–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
            'NPHI': np.random.normal(0.25, 0.05),  # –í—ã—Å–æ–∫–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å –Ω–µ–π—Ç—Ä–æ–Ω–æ–≤
            'por_rf': np.random.normal(0.22, 0.04),  # –í—ã—Å–æ–∫–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å
            'kvo_rf': np.random.normal(0.18, 0.03),  # –í—ã—Å–æ–∫–∞—è –Ω–µ—Ñ—Ç–µ–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
            'Q': np.random.normal(50, 15),  # –í—ã—Å–æ–∫–∏–π –¥–µ–±–∏—Ç
            'coll_type': '–≤—ã—Å–æ–∫–æ–ø–æ—Ä–∏—Å—Ç—ã–π'
        })
    
    # –¢–∏–ø 2: –°—Ä–µ–¥–Ω–µ–ø–æ—Ä–∏—Å—Ç—ã–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã
    for i in range(n_samples // 3, 2 * n_samples // 3):
        data.append({
            'group_number': i + 1,
            'well': f'Well_{i % 5 + 1}',
            'GR': np.random.normal(80, 15),  # –°—Ä–µ–¥–Ω—è—è —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            'RHOB': np.random.normal(2.4, 0.15),  # –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
            'NPHI': np.random.normal(0.15, 0.04),  # –°—Ä–µ–¥–Ω—è—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å –Ω–µ–π—Ç—Ä–æ–Ω–æ–≤
            'por_rf': np.random.normal(0.12, 0.03),  # –°—Ä–µ–¥–Ω—è—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å
            'kvo_rf': np.random.normal(0.08, 0.02),  # –°—Ä–µ–¥–Ω—è—è –Ω–µ—Ñ—Ç–µ–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
            'Q': np.random.normal(20, 8),  # –°—Ä–µ–¥–Ω–∏–π –¥–µ–±–∏—Ç
            'coll_type': '—Å—Ä–µ–¥–Ω–µ–ø–æ—Ä–∏—Å—Ç—ã–π'
        })
    
    # –¢–∏–ø 3: –ù–∏–∑–∫–æ–ø–æ—Ä–∏—Å—Ç—ã–µ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä—ã
    for i in range(2 * n_samples // 3, n_samples):
        data.append({
            'group_number': i + 1,
            'well': f'Well_{i % 5 + 1}',
            'GR': np.random.normal(120, 20),  # –í—ã—Å–æ–∫–∞—è —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            'RHOB': np.random.normal(2.6, 0.2),  # –í—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
            'NPHI': np.random.normal(0.05, 0.02),  # –ù–∏–∑–∫–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å –Ω–µ–π—Ç—Ä–æ–Ω–æ–≤
            'por_rf': np.random.normal(0.05, 0.02),  # –ù–∏–∑–∫–∞—è –ø–æ—Ä–∏—Å—Ç–æ—Å—Ç—å
            'kvo_rf': np.random.normal(0.02, 0.01),  # –ù–∏–∑–∫–∞—è –Ω–µ—Ñ—Ç–µ–Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
            'Q': np.random.normal(5, 3),  # –ù–∏–∑–∫–∏–π –¥–µ–±–∏—Ç
            'coll_type': '–Ω–∏–∑–∫–æ–ø–æ—Ä–∏—Å—Ç—ã–π'
        })
    
    return pd.DataFrame(data)

def test_regression():
    """–¢–µ—Å—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_test_data()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    model = AgglomerativeBoosting(
        n_clusters=3,
        linkage_method='ward',
        n_estimators=50,
        learning_rate=0.1,
        max_depth=3,
        task_type='regression'
    )
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    features = ['GR', 'RHOB', 'NPHI', 'por_rf', 'kvo_rf']
    target = 'Q'
    
    # –û–±—É—á–µ–Ω–∏–µ
    model.fit(df, features, target)
    print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predictions = model.predict(df, features)
    print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
    
    # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    cv_results = model.cross_validate(df, features, target, cv_folds=3)
    print(f"üìä R¬≤ Score: {cv_results['mean_score']:.3f} ¬± {cv_results['std_score']:.3f}")
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    fig = model.plot_dendrogram(df, features, figsize=(10, 6))
    plt.title("–î–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    plt.show()
    
    return model, df

def test_classification():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    df = create_test_data()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    model = AgglomerativeBoosting(
        n_clusters=3,
        linkage_method='ward',
        n_estimators=50,
        learning_rate=0.1,
        max_depth=3,
        task_type='classification'
    )
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    features = ['GR', 'RHOB', 'NPHI', 'por_rf', 'kvo_rf']
    target = 'coll_type'
    
    # –û–±—É—á–µ–Ω–∏–µ
    model.fit(df, features, target)
    print("‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞")
    
    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
    predictions = model.predict(df, features)
    print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
    
    # –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è
    cv_results = model.cross_validate(df, features, target, cv_folds=3)
    print(f"üìä Accuracy: {cv_results['mean_score']:.3f} ¬± {cv_results['std_score']:.3f}")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
    fig = model.plot_cluster_analysis(df, features, target, figsize=(12, 8))
    plt.title("–ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    plt.show()
    
    return model, df

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–ª–æ–º–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±—É—Å—Ç–∏–Ω–≥–∞")
    print("=" * 50)
    
    try:
        # –¢–µ—Å—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
        reg_model, reg_df = test_regression()
        
        # –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        cls_model, cls_df = test_classification()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        print("- –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: –æ–±—É—á–µ–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        print("- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: –æ–±—É—á–µ–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        print("- –î–µ–Ω–¥—Ä–æ–≥—Ä–∞–º–º—ã: –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã")
        print("- –ê–Ω–∞–ª–∏–∑ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: –≤—ã–ø–æ–ª–Ω–µ–Ω")
        print("- –ö—Ä–æ—Å—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ–¥–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()


