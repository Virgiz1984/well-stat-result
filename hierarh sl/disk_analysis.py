"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
"""

import os
import subprocess
import sys
from pathlib import Path
import pandas as pd

def get_folder_size(path):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ –±–∞–π—Ç–∞—Ö"""
    total_size = 0
    try:
        for dirpath, dirnames, filenames in os.walk(path):
            for filename in filenames:
                try:
                    filepath = os.path.join(dirpath, filename)
                    if os.path.exists(filepath):
                        total_size += os.path.getsize(filepath)
                except (OSError, IOError):
                    continue
    except (OSError, IOError):
        pass
    return total_size

def format_size(size_bytes):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    if size_bytes == 0:
        return "0 B"
    
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024.0
        i += 1
    
    return f"{size_bytes:.2f} {size_names[i]}"

def analyze_disk_c():
    """–ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–∞ C:"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –¥–∏—Å–∫–∞ C:")
    print("=" * 50)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞–ø–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    folders_to_check = [
        "C:\\Users",
        "C:\\Program Files",
        "C:\\Program Files (x86)",
        "C:\\Windows",
        "C:\\ProgramData",
        "C:\\Temp",
        "C:\\tmp"
    ]
    
    folder_sizes = []
    
    for folder in folders_to_check:
        if os.path.exists(folder):
            print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {folder}...")
            try:
                size = get_folder_size(folder)
                folder_sizes.append({
                    '–ü–∞–ø–∫–∞': folder,
                    '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)': size,
                    '–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)': format_size(size)
                })
                print(f"   –†–∞–∑–º–µ—Ä: {format_size(size)}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")
                folder_sizes.append({
                    '–ü–∞–ø–∫–∞': folder,
                    '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)': 0,
                    '–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)': "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞"
                })
        else:
            print(f"üìÅ {folder} - –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    folder_sizes.sort(key=lambda x: x['–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)'], reverse=True)
    
    print("\nüìä –¢–û–ü –ø–∞–ø–æ–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É:")
    print("-" * 80)
    for i, folder in enumerate(folder_sizes[:10], 1):
        print(f"{i:2d}. {folder['–ü–∞–ø–∫–∞']:<30} {folder['–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)']:>15}")
    
    return folder_sizes

def analyze_user_folders():
    """–ê–Ω–∞–ª–∏–∑ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("\nüë§ –ê–Ω–∞–ª–∏–∑ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print("=" * 50)
    
    user_profile = os.path.expanduser("~")
    user_folders = [
        "AppData",
        "Documents", 
        "Downloads",
        "Desktop",
        "Pictures",
        "Videos",
        "Music"
    ]
    
    user_sizes = []
    
    for folder in user_folders:
        folder_path = os.path.join(user_profile, folder)
        if os.path.exists(folder_path):
            print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {folder}...")
            try:
                size = get_folder_size(folder_path)
                user_sizes.append({
                    '–ü–∞–ø–∫–∞': folder,
                    '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)': size,
                    '–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)': format_size(size)
                })
                print(f"   –†–∞–∑–º–µ—Ä: {format_size(size)}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    user_sizes.sort(key=lambda x: x['–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)'], reverse=True)
    
    print("\nüìä –¢–û–ü –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    print("-" * 50)
    for i, folder in enumerate(user_sizes, 1):
        print(f"{i:2d}. {folder['–ü–∞–ø–∫–∞']:<20} {folder['–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)']:>15}")
    
    return user_sizes

def analyze_appdata():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AppData"""
    print("\nüîß –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AppData:")
    print("=" * 50)
    
    appdata_path = os.path.join(os.path.expanduser("~"), "AppData")
    appdata_folders = ["Local", "Roaming", "LocalLow"]
    
    appdata_sizes = []
    
    for folder in appdata_folders:
        folder_path = os.path.join(appdata_path, folder)
        if os.path.exists(folder_path):
            print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é AppData\\{folder}...")
            try:
                size = get_folder_size(folder_path)
                appdata_sizes.append({
                    '–ü–∞–ø–∫–∞': f"AppData\\{folder}",
                    '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)': size,
                    '–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)': format_size(size)
                })
                print(f"   –†–∞–∑–º–µ—Ä: {format_size(size)}")
            except Exception as e:
                print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    appdata_sizes.sort(key=lambda x: x['–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)'], reverse=True)
    
    print("\nüìä AppData –ø–æ —Ä–∞–∑–º–µ—Ä—É:")
    print("-" * 50)
    for i, folder in enumerate(appdata_sizes, 1):
        print(f"{i:2d}. {folder['–ü–∞–ø–∫–∞']:<20} {folder['–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)']:>15}")
    
    return appdata_sizes

def find_large_files(root_path, min_size_mb=100):
    """–ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print(f"\nüîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ {min_size_mb} MB:")
    print("=" * 50)
    
    large_files = []
    min_size_bytes = min_size_mb * 1024 * 1024
    
    try:
        for root, dirs, files in os.walk(root_path):
            for file in files:
                try:
                    file_path = os.path.join(root, file)
                    if os.path.exists(file_path):
                        file_size = os.path.getsize(file_path)
                        if file_size >= min_size_bytes:
                            large_files.append({
                                '–§–∞–π–ª': file_path,
                                '–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)': file_size,
                                '–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)': format_size(file_size)
                            })
                except (OSError, IOError):
                    continue
    except (OSError, IOError):
        pass
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
    large_files.sort(key=lambda x: x['–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)'], reverse=True)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(large_files)} —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ {min_size_mb} MB:")
    print("-" * 80)
    for i, file_info in enumerate(large_files[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-20
        print(f"{i:2d}. {file_info['–†–∞–∑–º–µ—Ä (—á–∏—Ç–∞–µ–º—ã–π)']:>15} - {file_info['–§–∞–π–ª']}")
    
    return large_files

def get_disk_usage():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞"""
    print("\nüíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:")
    print("=" * 50)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö
        result = subprocess.run([
            'powershell', '-Command', 
            'Get-WmiObject -Class Win32_LogicalDisk | Select-Object DeviceID, @{Name="Size(GB)";Expression={[math]::Round($_.Size/1GB,2)}}, @{Name="FreeSpace(GB)";Expression={[math]::Round($_.FreeSpace/1GB,2)}}, @{Name="PercentFree";Expression={[math]::Round(($_.FreeSpace/$_.Size)*100,2)}} | Format-Table -AutoSize'
        ], capture_output=True, text=True, encoding='utf-8')
        
        print(result.stdout)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞")
    print("=" * 60)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö
    get_disk_usage()
    
    # –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞–ø–æ–∫
    folder_sizes = analyze_disk_c()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_sizes = analyze_user_folders()
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ AppData
    appdata_sizes = analyze_appdata()
    
    # –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–µ
    user_profile = os.path.expanduser("~")
    large_files = find_large_files(user_profile, min_size_mb=50)
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ—á–∏—Å—Ç–∫–µ
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –û–ß–ò–°–¢–ö–ï:")
    print("=" * 50)
    
    total_user_size = sum(folder['–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)'] for folder in user_sizes)
    total_appdata_size = sum(folder['–†–∞–∑–º–µ—Ä (–±–∞–π—Ç—ã)'] for folder in appdata_sizes)
    
    print(f"1. üìÅ –ü–∞–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–∏–º–∞—é—Ç: {format_size(total_user_size)}")
    print(f"2. üîß AppData –∑–∞–Ω–∏–º–∞–µ—Ç: {format_size(total_appdata_size)}")
    print(f"3. üîç –ù–∞–π–¥–µ–Ω–æ {len(large_files)} –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ (>50MB)")
    
    print("\nüéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
    print("‚Ä¢ –û—á–∏—Å—Ç–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (Temp, %TEMP%)")
    print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É Downloads –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã")
    print("‚Ä¢ –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à –±—Ä–∞—É–∑–µ—Ä–æ–≤")
    print("‚Ä¢ –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    print("‚Ä¢ –û—á–∏—Å—Ç–∏—Ç–µ –∫–æ—Ä–∑–∏–Ω—É")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    try:
        df = pd.DataFrame(folder_sizes)
        df.to_csv('disk_analysis_report.csv', index=False, encoding='utf-8')
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ disk_analysis_report.csv")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

if __name__ == "__main__":
    main()


